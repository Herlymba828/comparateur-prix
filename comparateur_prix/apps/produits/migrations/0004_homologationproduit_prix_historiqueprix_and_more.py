# Generated by Django 5.1.12 on 2025-09-29 15:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('magasins', '0002_magasin_formatted_address_magasin_geocoded_at_and_more'),
        ('produits', '0003_homologation_norm_and_indexes'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HomologationProduit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=255)),
                ('categorie', models.CharField(default='Non classé', max_length=120)),
                ('sous_categorie', models.CharField(blank=True, default='', max_length=120)),
                ('format', models.CharField(blank=True, default='', help_text='Format/emballage/quantité, ex: 1L, 500g', max_length=120)),
                ('marque', models.CharField(blank=True, default='', max_length=120)),
                ('nom_norm', models.CharField(db_index=True, default='', max_length=255)),
                ('marque_norm', models.CharField(db_index=True, default='', max_length=120)),
                ('format_norm', models.CharField(db_index=True, default='', max_length=120)),
            ],
            options={
                'verbose_name': 'Produit homologué',
                'verbose_name_plural': 'Produits homologués',
                'indexes': [models.Index(fields=['nom', 'categorie'], name='produits_ho_nom_4d5d5f_idx'), models.Index(fields=['marque'], name='produits_ho_marque_fc4c5a_idx'), models.Index(fields=['nom_norm'], name='produits_ho_nom_nor_754354_idx'), models.Index(fields=['marque_norm'], name='produits_ho_marque__1f3adc_idx'), models.Index(fields=['format_norm'], name='produits_ho_format__f6aefc_idx')],
                # Le nom de contrainte uq_ph_norm peut déjà exister depuis 0003; utiliser un nom différent
                'constraints': [models.UniqueConstraint(fields=('nom_norm', 'marque_norm', 'format_norm', 'categorie'), name='uq_ph_norm_dj')],
                'unique_together': {('nom', 'format', 'marque', 'categorie')},
            },
        ),
        migrations.CreateModel(
            name='Prix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix_actuel', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Prix actuel')),
                ('prix_origine', models.DecimalField(blank=True, decimal_places=2, help_text='Prix avant promotion', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name="Prix d'origine")),
                ('est_promotion', models.BooleanField(default=False, verbose_name='Est en promotion')),
                ('pourcentage_promotion', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pourcentage de promotion')),
                ('date_debut_promotion', models.DateTimeField(blank=True, null=True, verbose_name='Date de début de promotion')),
                ('date_fin_promotion', models.DateTimeField(blank=True, null=True, verbose_name='Date de fin de promotion')),
                ('est_disponible', models.BooleanField(default=True, verbose_name='Est disponible')),
                ('quantite_stock', models.PositiveIntegerField(blank=True, null=True, verbose_name='Quantité en stock')),
                ('niveau_stock', models.CharField(choices=[('disponible', 'Disponible'), ('limite', 'Stock limité'), ('rupture', 'Rupture de stock'), ('commande', 'Sur commande')], default='disponible', max_length=20, verbose_name='Niveau de stock')),
                ('source_prix', models.CharField(choices=[('scraping', 'Scraping automatique'), ('manuel', 'Saisie manuelle'), ('api', 'API partenaire'), ('utilisateur', 'Suggestion utilisateur')], default='scraping', max_length=50, verbose_name='Source du prix')),
                ('confiance_prix', models.DecimalField(decimal_places=2, default=1.0, help_text="Niveau de confiance dans l'exactitude du prix (0-1)", max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MinValueValidator(1)], verbose_name='Niveau de confiance')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_modification', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('date_verification', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière vérification')),
                ('magasin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prix', to='magasins.magasin', verbose_name='Magasin')),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prix', to='produits.produit', verbose_name='Produit')),
                ('verifie_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Vérifié par')),
            ],
            options={
                'verbose_name': 'Prix',
                'verbose_name_plural': 'Prix',
                'ordering': ['-date_modification'],
            },
        ),
        migrations.CreateModel(
            name='HistoriquePrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ancien_prix', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Ancien prix')),
                ('nouveau_prix', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Nouveau prix')),
                ('variation', models.DecimalField(decimal_places=2, help_text='Différence de prix', max_digits=8, verbose_name='Variation')),
                ('pourcentage_variation', models.DecimalField(decimal_places=2, help_text='Pourcentage de changement', max_digits=6, verbose_name='Pourcentage de variation')),
                ('raison', models.CharField(choices=[('promotion', 'Promotion'), ('fin_promotion', 'Fin de promotion'), ('augmentation', 'Augmentation de prix'), ('reduction', 'Réduction de prix'), ('correction', 'Correction d erreur'), ('mise_a_jour', 'Mise à jour normale')], default='mise_a_jour', max_length=50, verbose_name='Raison du changement')),
                ('date_changement', models.DateTimeField(auto_now_add=True, verbose_name='Date du changement')),
                ('modifie_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Modifié par')),
                ('prix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='historique', to='produits.prix', verbose_name='Prix')),
            ],
            options={
                'verbose_name': 'Historique des prix',
                'verbose_name_plural': 'Historique des prix',
                'ordering': ['-date_changement'],
            },
        ),
        migrations.CreateModel(
            name='PrixHomologue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix_unitaire', models.DecimalField(decimal_places=4, max_digits=10)),
                ('unite', models.CharField(blank=True, default='', max_length=20)),
                ('prix_detail', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('prix_par_kilo', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('localisation', models.CharField(blank=True, choices=[('', 'Non spécifié'), ('libreville', 'Libreville'), ('province', 'Province')], default='', help_text='Localisation associée au prix homologué (si applicable)', max_length=20)),
                ('date_publication', models.DateField(blank=True, null=True)),
                ('periode_debut', models.DateField(blank=True, null=True)),
                ('periode_fin', models.DateField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prix_homologues', to='produits.homologationproduit')),
            ],
            options={
                'verbose_name': 'Prix homologué',
                'verbose_name_plural': 'Prix homologués',
                'ordering': ['-date_publication', '-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='SuggestionPrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix_suggere', models.DecimalField(decimal_places=2, max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Prix suggéré')),
                ('date_observation', models.DateTimeField(help_text="Date à laquelle l'utilisateur a vu ce prix", verbose_name="Date d'observation")),
                ('photo_preuve', models.ImageField(blank=True, null=True, upload_to='suggestions_prix/', verbose_name='Photo preuve')),
                ('commentaire', models.TextField(blank=True, help_text='Informations supplémentaires sur le prix observé', verbose_name='Commentaire')),
                ('statut', models.CharField(choices=[('en_attente', 'En attente de validation'), ('approuve', 'Approuvé'), ('rejete', 'Rejeté'), ('duplique', 'Doublon')], default='en_attente', max_length=20, verbose_name='Statut')),
                ('date_verification', models.DateTimeField(blank=True, null=True, verbose_name='Date de vérification')),
                ('raison_rejet', models.TextField(blank=True, help_text='Raison du rejet si la suggestion est refusée', verbose_name='Raison du rejet')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('magasin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions_prix', to='magasins.magasin', verbose_name='Magasin')),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions_prix', to='produits.produit', verbose_name='Produit')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions_prix', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('verifie_par', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='suggestions_verifiees', to=settings.AUTH_USER_MODEL, verbose_name='Vérifié par')),
            ],
            options={
                'verbose_name': 'Suggestion de prix',
                'verbose_name_plural': 'Suggestions de prix',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='AlertePrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prix_souhaite', models.DecimalField(decimal_places=2, help_text="Prix maximum que l'utilisateur est prêt à payer", max_digits=8, validators=[django.core.validators.MinValueValidator(0.01)], verbose_name='Prix souhaité')),
                ('pourcentage_reduction', models.DecimalField(blank=True, decimal_places=2, help_text='Pourcentage de réduction minimum souhaité', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Pourcentage de réduction souhaité')),
                ('est_active', models.BooleanField(default=True, verbose_name='Est active')),
                ('frequence_verification', models.CharField(choices=[('quotidienne', 'Quotidienne'), ('hebdomadaire', 'Hebdomadaire'), ('mensuelle', 'Mensuelle'), ('instantanee', 'Instantanée')], default='quotidienne', max_length=20, verbose_name='Fréquence de vérification')),
                ('date_creation', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('date_derniere_alerte', models.DateTimeField(blank=True, null=True, verbose_name='Date de dernière alerte')),
                ('nombre_alertes_envoyees', models.PositiveIntegerField(default=0, verbose_name="Nombre d'alertes envoyées")),
                ('magasins', models.ManyToManyField(blank=True, help_text='Laissez vide pour surveiller tous les magasins', to='magasins.magasin', verbose_name='Magasins surveillés')),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alertes_prix', to='produits.produit', verbose_name='Produit')),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alertes_prix', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Alerte prix',
                'verbose_name_plural': 'Alertes prix',
                'ordering': ['-date_creation'],
                'indexes': [models.Index(fields=['utilisateur', 'est_active'], name='produits_al_utilisa_0d0584_idx'), models.Index(fields=['produit', 'est_active'], name='produits_al_produit_aad8e6_idx')],
                'unique_together': {('utilisateur', 'produit')},
            },
        ),
        migrations.CreateModel(
            name='ComparaisonPrix',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_comparaison', models.DateTimeField(auto_now_add=True, verbose_name='Date de comparaison')),
                ('prix_minimum', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix minimum')),
                ('prix_maximum', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix maximum')),
                ('prix_moyen', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Prix moyen')),
                ('nombre_magasins', models.PositiveIntegerField(verbose_name='Nombre de magasins')),
                ('ecart_type', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Écart-type')),
                ('coefficient_variation', models.DecimalField(blank=True, decimal_places=2, help_text='Écart-type / Prix moyen', max_digits=6, null=True, verbose_name='Coefficient de variation')),
                ('magasin_prix_max', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='magasins.magasin', verbose_name='Magasin avec prix maximum')),
                ('magasin_prix_min', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='magasins.magasin', verbose_name='Magasin avec prix minimum')),
                ('produit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comparaisons', to='produits.produit', verbose_name='Produit')),
            ],
            options={
                'verbose_name': 'Comparaison de prix',
                'verbose_name_plural': 'Comparaisons de prix',
                'ordering': ['-date_comparaison'],
                'indexes': [models.Index(fields=['produit', 'date_comparaison'], name='produits_co_produit_b68b36_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='prix',
            index=models.Index(fields=['produit', 'magasin'], name='produits_pr_produit_3232e5_idx'),
        ),
        migrations.AddIndex(
            model_name='prix',
            index=models.Index(fields=['prix_actuel'], name='produits_pr_prix_ac_cd783f_idx'),
        ),
        migrations.AddIndex(
            model_name='prix',
            index=models.Index(fields=['est_promotion'], name='produits_pr_est_pro_e0354f_idx'),
        ),
        migrations.AddIndex(
            model_name='prix',
            index=models.Index(fields=['est_disponible'], name='produits_pr_est_dis_bcbc51_idx'),
        ),
        migrations.AddIndex(
            model_name='prix',
            index=models.Index(fields=['date_modification'], name='produits_pr_date_mo_4e1099_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prix',
            unique_together={('produit', 'magasin')},
        ),
        migrations.AddIndex(
            model_name='historiqueprix',
            index=models.Index(fields=['prix', 'date_changement'], name='produits_hi_prix_id_34f78d_idx'),
        ),
        migrations.AddIndex(
            model_name='historiqueprix',
            index=models.Index(fields=['date_changement'], name='produits_hi_date_ch_29e8ed_idx'),
        ),
        migrations.AddIndex(
            model_name='prixhomologue',
            index=models.Index(fields=['produit', 'date_publication'], name='produits_pr_produit_5a1e34_idx'),
        ),
        migrations.AddIndex(
            model_name='prixhomologue',
            index=models.Index(fields=['localisation'], name='produits_pr_localis_24a6d8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='prixhomologue',
            unique_together={('produit', 'date_publication', 'unite', 'prix_unitaire', 'localisation')},
        ),
        migrations.AddIndex(
            model_name='suggestionprix',
            index=models.Index(fields=['produit', 'magasin'], name='produits_su_produit_311df8_idx'),
        ),
        migrations.AddIndex(
            model_name='suggestionprix',
            index=models.Index(fields=['statut'], name='produits_su_statut_e54c14_idx'),
        ),
        migrations.AddIndex(
            model_name='suggestionprix',
            index=models.Index(fields=['utilisateur'], name='produits_su_utilisa_5ace3e_idx'),
        ),
    ]
