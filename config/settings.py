"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.core.exceptions import ImproperlyConfigured
from secrets import token_urlsafe

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Load environment variables from a .env file if present
load_dotenv(BASE_DIR / '.env')
# Force client encoding for PostgreSQL at libpq level before any connection
# Allow override via env (set to 'LATIN1' if your server/cluster is Latin-1)
os.environ.setdefault('PGCLIENTENCODING', os.getenv('PGCLIENTENCODING', 'UTF8'))

# SECURITY WARNING: don't run with debug turned on in production!
_RAW_DEBUG = os.getenv('DJANGO_DEBUG', 'True')
DEBUG = _RAW_DEBUG.lower() in ('1', 'true', 'yes', 'y')

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    if DEBUG:
        # Clé éphémère auto-générée pour le développement local uniquement
        SECRET_KEY = token_urlsafe(50)
    else:
        raise ImproperlyConfigured('DJANGO_SECRET_KEY must be set in production')

ALLOWED_HOSTS = [h for h in os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',') if h] or (['localhost', '127.0.0.1'] if DEBUG else [])

# Utiliser le modèle utilisateur personnalisé
AUTH_USER_MODEL = 'utilisateurs.Utilisateur'

# Ne pas initialiser les modèles de recommandation (sklearn/xgboost) au démarrage
RECO_INIT_MODELS_ON_STARTUP = os.getenv('RECO_INIT_MODELS_ON_STARTUP', 'False').lower() in ('1', 'true', 'yes', 'y')

# Applications installées
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Applications tierces
    'rest_framework',
    'social_django',
    'django_filters',
    'corsheaders',
    'drf_spectacular',
    'rest_framework_simplejwt.token_blacklist',
    'django_otp',
    'django_otp.plugins.otp_totp',
    
    # Vos applications
    'apps.utilisateurs',
    'apps.produits',
    'apps.magasins',
    'apps.recommandations',
    'apps.analyses',
    'apps.api',
]

# Définir les origines CORS via variables d'environnement (voir plus bas). Éviter des valeurs en dur ici.

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.gzip.GZipMiddleware',
    'django.middleware.http.ConditionalGetMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    'django_otp.middleware.OTPMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
                'config.context_processors.social_providers',
                'config.context_processors.public_settings',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('POSTGRES_DB', 'soutenance2'),
        'USER': os.getenv('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', ''),
        'HOST': os.getenv('POSTGRES_HOST', 'localhost'),
        'PORT': os.getenv('POSTGRES_PORT', '5432'),
        'OPTIONS': {
            # Force UTF-8 client encoding for the DB session
            'options': '-c client_encoding=UTF8',
        },
    },
}

# Admin URL paramétrable (obfuscation basique en prod)
ADMIN_URL = os.getenv('DJANGO_ADMIN_URL', 'admin/')
if not ADMIN_URL.endswith('/'):
    ADMIN_URL = ADMIN_URL + '/'

# Optional SQLite fallback for development
if os.getenv('USE_SQLITE_DEV', 'False').lower() in ('1', 'true', 'yes', 'y') and DEBUG:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# En production, exiger des identifiants sûrs et sécuriser la connexion DB
if not DEBUG:
    if not os.getenv('POSTGRES_PASSWORD'):
        raise ImproperlyConfigured('POSTGRES_PASSWORD must be set in production')
    # Activer SSL vers PostgreSQL par défaut (désactivable via POSTGRES_SSL_REQUIRE=false)
    if os.getenv('POSTGRES_SSL_REQUIRE', 'True').lower() in ('1', 'true', 'yes', 'y'):
        DATABASES['default'].setdefault('OPTIONS', {})
        DATABASES['default']['OPTIONS']['sslmode'] = 'require'

# --- Social Auth (social-auth-app-django) ---
# Authentication backends: social providers + default ModelBackend
# Note: Apple is enabled only if all required keys are configured to avoid runtime errors.
# Provider credentials (configure in environment variables)
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

SOCIAL_AUTH_FACEBOOK_KEY = os.getenv('FACEBOOK_APP_ID')
SOCIAL_AUTH_FACEBOOK_SECRET = os.getenv('FACEBOOK_APP_SECRET')

# Apple Sign In requires additional keys
SOCIAL_AUTH_APPLE_ID_CLIENT = os.getenv('APPLE_CLIENT_ID')
SOCIAL_AUTH_APPLE_ID_TEAM = os.getenv('APPLE_TEAM_ID')
SOCIAL_AUTH_APPLE_ID_KEY = os.getenv('APPLE_KEY_ID')
# Private key in PEM format. You can store multiline PEM as a single env var.
SOCIAL_AUTH_APPLE_ID_SECRET = os.getenv('APPLE_PRIVATE_KEY_PEM')

ENABLE_APPLE_AUTH = all([
    SOCIAL_AUTH_APPLE_ID_TEAM,
    SOCIAL_AUTH_APPLE_ID_KEY,
    SOCIAL_AUTH_APPLE_ID_SECRET,
])

AUTHENTICATION_BACKENDS = [
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
]
if ENABLE_APPLE_AUTH:
    AUTHENTICATION_BACKENDS.insert(2, 'social_core.backends.apple.AppleIdAuth')
AUTHENTICATION_BACKENDS = tuple(AUTHENTICATION_BACKENDS)

# Login/redirect URLs
LOGIN_URL = '/connexion/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Social Auth error handling
SOCIAL_AUTH_LOGIN_ERROR_URL = '/oauth/error/'
# In production we generally don't want to raise raw exceptions to users
SOCIAL_AUTH_RAISE_EXCEPTIONS = False

# Use JSONField if available for storing extra data
SOCIAL_AUTH_JSONFIELD_ENABLED = True
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'

TIME_ZONE = 'Africa/Libreville'

USE_I18N = True

USE_TZ = True

# Celery configuration (after TIME_ZONE is defined)
# Use REDIS_URL as default broker/result backend
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', os.getenv('REDIS_URL', 'redis://localhost:6379/0'))
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', CELERY_BROKER_URL)
CELERY_TIMEZONE = TIME_ZONE
# Retry broker connection on startup (Celery 6+ recommendation)
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = os.getenv('CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP', 'True').lower() in ('1', 'true', 'yes', 'y')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
# Collected static files (e.g., via collectstatic)
STATIC_ROOT = BASE_DIR / 'staticfiles'
# Aucune source statique côté projet (frontend supprimé). Les fichiers statiques collectés iront dans STATIC_ROOT.
STATICFILES_DIRS = []

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

USE_JWT_AUTH = os.getenv('USE_JWT_AUTH', 'False').lower() in ('1', 'true', 'yes', 'y')

DEFAULT_AUTH_CLASSES = [
    # Optionnel: JWT si activé par env et dépendance installée
]
if USE_JWT_AUTH:
    DEFAULT_AUTH_CLASSES.append('rest_framework_simplejwt.authentication.JWTAuthentication')
# SessionAuthentication utile pour l'admin/browsable API. BasicAuthentication seulement en dev.
DEFAULT_AUTH_CLASSES.append('rest_framework.authentication.SessionAuthentication')
if DEBUG:
    DEFAULT_AUTH_CLASSES.append('rest_framework.authentication.BasicAuthentication')

_default_perms = ['rest_framework.permissions.AllowAny'] if DEBUG else ['rest_framework.permissions.IsAuthenticatedOrReadOnly']
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': _default_perms,
    'DEFAULT_AUTHENTICATION_CLASSES': DEFAULT_AUTH_CLASSES,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': os.getenv('DRF_THROTTLE_ANON', '100/min'),
        'user': os.getenv('DRF_THROTTLE_USER', '1000/min'),
    },
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# OpenAPI / Swagger settings
SPECTACULAR_SETTINGS = {
    'TITLE': 'Comparateur Prix API',
    'DESCRIPTION': 'Documentation API publique et interne',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# SimpleJWT configuration (si activé via USE_JWT_AUTH)
from datetime import timedelta  # noqa: E402
JWT_ALG = os.getenv('JWT_ALGORITHM', 'HS256').upper()

def _read_file_or_none(path: str):
    try:
        if not path:
            return None
        # Résoudre chemin relatif par rapport à BASE_DIR
        if not os.path.isabs(path):
            path = os.path.join(BASE_DIR, path)
        if os.path.exists(path):
            with open(path, 'r', encoding='utf-8') as f:
                return f.read()
    except Exception:
        pass
    return None

_simple_jwt_common = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_MIN', '15'))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_DAYS', '7'))),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

if JWT_ALG == 'RS256':
    _priv_path = os.getenv('JWT_PRIVATE_KEY_PATH')
    _pub_path = os.getenv('JWT_PUBLIC_KEY_PATH')
    _priv_pem = _read_file_or_none(_priv_path)
    _pub_pem = _read_file_or_none(_pub_path)
    if not (_priv_pem and _pub_pem):
        raise ImproperlyConfigured('For RS256, set JWT_PRIVATE_KEY_PATH and JWT_PUBLIC_KEY_PATH to valid PEM files')
    SIMPLE_JWT = {
        **_simple_jwt_common,
        'ALGORITHM': 'RS256',
        'SIGNING_KEY': _priv_pem,
        'VERIFYING_KEY': _pub_pem,
    }
else:
    SIMPLE_JWT = {
        **_simple_jwt_common,
        'ALGORITHM': 'HS256',
        'SIGNING_KEY': os.getenv('JWT_SIGNING_KEY', SECRET_KEY),
    }

# CORS configuration (adjust origins via env)
if DEBUG:
    # In development, allow all by default (can be tightened via env)
    CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'True').lower() in ('1', 'true', 'yes', 'y')
else:
    # In production, disallow all by default; must be explicitly configured via env
    CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'False').lower() in ('1', 'true', 'yes', 'y')
    # Recommended: set specific allowed origins in production
CORS_ALLOWED_ORIGINS = [o for o in os.getenv('CORS_ALLOWED_ORIGINS', '').split(',') if o]

# Optional: trust proxies and CSRF origins if served behind reverse proxy
CSRF_TRUSTED_ORIGINS = [o for o in os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',') if o]

# Google Maps API key (used for Distance Matrix / JS Maps)
GOOGLE_MAPS_API_KEY = os.getenv('GOOGLE_MAPS_API_KEY')

# Cache (Redis si disponible en prod, sinon cache local mémoire en dev)
REDIS_URL = os.getenv('REDIS_URL')
# Permet d'utiliser une base Redis distincte pour le cache Django si souhaité
REDIS_CACHE_URL = os.getenv('REDIS_CACHE_URL', REDIS_URL)
USE_REDIS_CACHE = bool(REDIS_CACHE_URL) and not DEBUG
if USE_REDIS_CACHE:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_CACHE_URL,
            # Note: Using Django's built-in RedisCache backend. Do not pass django-redis 'client_class' here.
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'comparateur-prix-local-cache',
        }
    }

# DRF renderers: garder la Browsable API en dev uniquement
if not DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'] = [
        'rest_framework.renderers.JSONRenderer',
    ]

# Logging (structured logs, JSON optional via LOG_JSON=true)
from config.optimizations.logging import get_logging_config  # noqa: E402
LOGGING = get_logging_config()

# Security hardening in production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_SSL_REDIRECT = True
    # Si derrière un reverse proxy (ex: nginx/elb) qui ajoute X-Forwarded-Proto
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = int(os.getenv('SECURE_HSTS_SECONDS', '31536000'))
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    # Cookies et en-têtes sécurité additionnels
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SAMESITE = 'Lax'
    SECURE_REFERRER_POLICY = os.getenv('SECURE_REFERRER_POLICY', 'strict-origin-when-cross-origin')